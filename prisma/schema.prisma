// This is your Prisma schema file,DEBUG
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  idUser          String            @id @default(uuid())
  email           String            @unique
  username        String?
  name            String?
  balances        Balance[]
  movements       Movement[]
  CategoryPerUser CategoryPerUser[]
}

model Balance {
  idBalance Int    @id @default(autoincrement())
  userId    String
  month     Int
  year      Int
  earnings  Float?
  expenses  Float?
  User      User?  @relation(fields: [userId], references: [idUser])

  @@unique([userId, month, year], name: "unique_month_year_per_user")
}

model Movement {
  idMovement      String        @id @default(uuid())
  userId          String
  typeId          Int
  createdAt       DateTime      @default(now())
  description     String
  value           Float
  methodPaymentId Int
  categoryId      Int?
  User            User          @relation(fields: [userId], references: [idUser])
  TypeMovement    TypeMovement  @relation(fields: [typeId], references: [idTypeMovement])
  MethodPayment   MethodPayment @relation(fields: [methodPaymentId], references: [idMethodPayment])
  Category        Category?     @relation(fields: [categoryId], references: [idCategory])
}

model TypeMovement {
  idTypeMovement Int        @id @default(autoincrement())
  description    String
  movements      Movement[]
}

model MethodPayment {
  idMethodPayment Int        @id @default(autoincrement())
  name            String
  movements       Movement[]
}

model Category {
  idCategory      Int               @id @default(autoincrement())
  name            String
  movements       Movement[]
  CategoryPerUser CategoryPerUser[]
}

model CategoryPerUser {
  userId     String
  categoryId Int
  limit      Float?
  User       User     @relation(fields: [userId], references: [idUser])
  Category   Category @relation(fields: [categoryId], references: [idCategory])
  @@id([userId, categoryId])
}
